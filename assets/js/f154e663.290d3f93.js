"use strict";(self.webpackChunkts_jest_docs=self.webpackChunkts_jest_docs||[]).push([["2626"],{3770:function(s,e,t){t.r(e),t.d(e,{frontMatter:()=>a,default:()=>h,toc:()=>j,metadata:()=>n,assets:()=>d,contentTitle:()=>c});var n=JSON.parse('{"id":"getting-started/options/diagnostics","title":"Diagnostics option","description":"The diagnostics option configures error reporting.","source":"@site/versioned_docs/version-29.0/getting-started/options/diagnostics.md","sourceDirName":"getting-started/options","slug":"/getting-started/options/diagnostics","permalink":"/ts-jest/docs/29.0/getting-started/options/diagnostics","draft":false,"unlisted":false,"editUrl":"https://github.com/kulshekhar/ts-jest/edit/main/website/versioned_docs/version-29.0/getting-started/options/diagnostics.md","tags":[],"version":"29.0","lastUpdatedBy":"ahnpnl","lastUpdatedAt":1754404190000,"frontMatter":{"title":"Diagnostics option"}}'),i=t(5893),r=t(65),o=t(7057),l=t(4250);let a={title:"Diagnostics option"},c=void 0,d={},j=[{value:"Disabling/enabling",id:"disablingenabling",level:3},{value:"Advanced configuration",id:"advanced-configuration",level:3},{value:"Examples",id:"examples",level:3},{value:"Disabling diagnostics",id:"disabling-diagnostics",level:4},{value:"Advanced options",id:"advanced-options",level:4},{value:"Enabling diagnostics for test files only",id:"enabling-diagnostics-for-test-files-only",level:5},{value:"Do not fail on first error",id:"do-not-fail-on-first-error",level:5},{value:"Ignoring some error codes",id:"ignoring-some-error-codes",level:5}];function x(s){let e={a:"a",code:"code",em:"em",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...s.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.code,{children:"diagnostics"})," option configures error reporting.\nIt can both be enabled/disabled entirely or limited to a specific type of errors and/or files."]}),"\n",(0,i.jsxs)(e.p,{children:["If a diagnostic is not filtered out, ",(0,i.jsx)(e.code,{children:"ts-jest"})," will fail the compilation and your test."]}),"\n",(0,i.jsx)(e.h3,{id:"disablingenabling",children:"Disabling/enabling"}),"\n",(0,i.jsxs)(e.p,{children:["By default all diagnostics are enabled. This is the same as setting the ",(0,i.jsx)(e.code,{children:"diagnostics"})," option to ",(0,i.jsx)(e.code,{children:"true"}),".\nTo disable all diagnostics, set ",(0,i.jsx)(e.code,{children:"diagnostics"})," to ",(0,i.jsx)(e.code,{children:"false"}),".\nThis might lead to slightly better performance, especially if you're not using Jest's cache."]}),"\n",(0,i.jsx)(e.h3,{id:"advanced-configuration",children:"Advanced configuration"}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.code,{children:"diagnostics"})," option's value can also accept an object for more advanced configuration. Each config. key is optional:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.code,{children:"warnOnly"})}),": If specified and ",(0,i.jsx)(e.code,{children:"true"}),", diagnostics will be reported but won't stop compilation (default: ",(0,i.jsx)(e.em,{children:"disabled"}),")."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.code,{children:"ignoreCodes"})}),": List of TypeScript error codes to ignore. Complete list can be found ",(0,i.jsx)(e.a,{href:"https://github.com/Microsoft/TypeScript/blob/main/src/compiler/diagnosticMessages.json",children:"there"}),". By default here are the ones ignored:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"6059"}),": ",(0,i.jsx)(e.em,{children:"'rootDir' is expected to contain all source files."})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"18002"}),": ",(0,i.jsx)(e.em,{children:"The 'files' list in config file is empty."})," (it is strongly recommended including this one)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"18003"}),": ",(0,i.jsx)(e.em,{children:"No inputs were found in config file."})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.code,{children:"exclude"})}),": If specified, diagnostics of source files which path ",(0,i.jsx)(e.strong,{children:"matches"})," will be ignored. This works a bit\nsimilar to ",(0,i.jsx)(e.code,{children:"tsconfig"})," option ",(0,i.jsx)(e.a,{href:"https://www.typescriptlang.org/tsconfig#exclude",children:"exclude"})," with the only difference is that\nin TypeScript, ",(0,i.jsx)(e.code,{children:"exclude"})," will also exclude files from compilation process."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.code,{children:"pretty"})}),": Enables/disables colorful and pretty output of errors (default: ",(0,i.jsx)(e.em,{children:"enabled"}),")."]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(e.h4,{id:"disabling-diagnostics",children:"Disabling diagnostics"}),"\n",(0,i.jsxs)(o.Z,{groupId:"code-examples",children:[(0,i.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"tab",children:"// jest.config.js\n/** @type {import('ts-jest').JestConfigWithTsJest} */\nmodule.exports = {\n  // [...]\n  transform: {\n    // '^.+\\\\.[tj]sx?$' to process ts,js,tsx,jsx with `ts-jest`\n    // '^.+\\\\.m?[tj]sx?$' to process ts,js,tsx,jsx,mts,mjs,mtsx,mjsx with `ts-jest`\n    '^.+\\\\.tsx?$': [\n      'ts-jest',\n      {\n        diagnostics: false,\n      },\n    ],\n  },\n}\n"})})}),(0,i.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",metastring:"tab",children:"// jest.config.ts\nimport type { JestConfigWithTsJest } from 'ts-jest'\n\nconst jestConfig: JestConfigWithTsJest = {\n  // [...]\n  transform: {\n    // '^.+\\\\.[tj]sx?$' to process ts,js,tsx,jsx with `ts-jest`\n    // '^.+\\\\.m?[tj]sx?$' to process ts,js,tsx,jsx,mts,mjs,mtsx,mjsx with `ts-jest`\n    '^.+\\\\.tsx?$': [\n      'ts-jest',\n      {\n        diagnostics: false,\n      },\n    ],\n  },\n}\n\nexport default jestConfig\n"})})}),(0,i.jsx)(l.Z,{value:"JSON",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-JSON",metastring:"tab",children:'// package.json\n{\n  // [...]\n  "jest": {\n    "transform": {\n      // \'^.+\\\\.[tj]sx?$\' to process ts,js,tsx,jsx with `ts-jest`\n      // \'^.+\\\\.m?[tj]sx?$\' to process ts,js,tsx,jsx,mts,mjs,mtsx,mjsx with `ts-jest`\n      "^.+\\\\.tsx?$": [\n        "ts-jest",\n        {\n          "diagnostics": false\n        }\n      ]\n    }\n  }\n}\n'})})})]}),"\n",(0,i.jsx)(e.h4,{id:"advanced-options",children:"Advanced options"}),"\n",(0,i.jsx)(e.h5,{id:"enabling-diagnostics-for-test-files-only",children:"Enabling diagnostics for test files only"}),"\n",(0,i.jsxs)(e.p,{children:["Assuming all your test files ends with ",(0,i.jsx)(e.code,{children:".spec.ts"})," or ",(0,i.jsx)(e.code,{children:".test.ts"}),", using the following config will enable error reporting only for those files:"]}),"\n",(0,i.jsxs)(o.Z,{groupId:"code-examples",children:[(0,i.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"tab",children:"// jest.config.js\n/** @type {import('ts-jest').JestConfigWithTsJest} */\nmodule.exports = {\n  // [...]\n  transform: {\n    // '^.+\\\\.[tj]sx?$' to process ts,js,tsx,jsx with `ts-jest`\n    // '^.+\\\\.m?[tj]sx?$' to process ts,js,tsx,jsx,mts,mjs,mtsx,mjsx with `ts-jest`\n    '^.+\\\\.tsx?$': [\n      'ts-jest',\n      {\n        diagnostics: {\n          exclude: ['!**/*.(spec|test).ts'],\n        },\n      },\n    ],\n  },\n}\n"})})}),(0,i.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",metastring:"tab",children:"// jest.config.ts\nimport type { JestConfigWithTsJest } from 'ts-jest'\n\nconst jestConfig: JestConfigWithTsJest = {\n  // [...]\n  transform: {\n    // '^.+\\\\.[tj]sx?$' to process ts,js,tsx,jsx with `ts-jest`\n    // '^.+\\\\.m?[tj]sx?$' to process ts,js,tsx,jsx,mts,mjs,mtsx,mjsx with `ts-jest`\n    '^.+\\\\.tsx?$': [\n      'ts-jest',\n      {\n        diagnostics: {\n          exclude: ['!**/*.(spec|test).ts'],\n        },\n      },\n    ],\n  },\n}\n\nexport default jestConfig\n"})})}),(0,i.jsx)(l.Z,{value:"JSON",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-JSON",metastring:"tab",children:'// package.json\n{\n  // [...]\n  "jest": {\n    "transform": {\n      // \'^.+\\\\.[tj]sx?$\' to process ts,js,tsx,jsx with `ts-jest`\n      // \'^.+\\\\.m?[tj]sx?$\' to process ts,js,tsx,jsx,mts,mjs,mtsx,mjsx with `ts-jest`\n      "^.+\\\\.tsx?$": [\n        "ts-jest",\n        {\n          "diagnostics": {\n            "exclude": ["!**/*.(spec|test).ts"]\n          }\n        }\n      ]\n    }\n  }\n}\n'})})})]}),"\n",(0,i.jsx)(e.h5,{id:"do-not-fail-on-first-error",children:"Do not fail on first error"}),"\n",(0,i.jsxs)(e.p,{children:["While some diagnostics are stop-blockers for the compilation, most of them are not. If you want the compilation (and so your tests) to continue when encountering those, set the ",(0,i.jsx)(e.code,{children:"warnOnly"})," to ",(0,i.jsx)(e.code,{children:"true"}),":"]}),"\n",(0,i.jsxs)(o.Z,{groupId:"code-examples",children:[(0,i.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"tab",children:"// jest.config.js\n/** @type {import('ts-jest').JestConfigWithTsJest} */\nmodule.exports = {\n  // [...]\n  transform: {\n    // '^.+\\\\.[tj]sx?$' to process ts,js,tsx,jsx with `ts-jest`\n    // '^.+\\\\.m?[tj]sx?$' to process ts,js,tsx,jsx,mts,mjs,mtsx,mjsx with `ts-jest`\n    '^.+\\\\.tsx?$': [\n      'ts-jest',\n      {\n        diagnostics: {\n          warnOnly: true,\n        },\n      },\n    ],\n  },\n}\n"})})}),(0,i.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",metastring:"tab",children:"// jest.config.ts\nimport type { JestConfigWithTsJest } from 'ts-jest'\n\nconst jestConfig: JestConfigWithTsJest = {\n  // [...]\n  transform: {\n    // '^.+\\\\.[tj]sx?$' to process ts,js,tsx,jsx with `ts-jest`\n    // '^.+\\\\.m?[tj]sx?$' to process ts,js,tsx,jsx,mts,mjs,mtsx,mjsx with `ts-jest`\n    '^.+\\\\.tsx?$': [\n      'ts-jest',\n      {\n        diagnostics: {\n          warnOnly: true,\n        },\n      },\n    ],\n  },\n}\n\nexport default jestConfig\n"})})}),(0,i.jsx)(l.Z,{value:"JSON",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-JSON",metastring:"tab",children:'// package.json\n{\n  // [...]\n  "jest": {\n    "transform": {\n      // \'^.+\\\\.[tj]sx?$\' to process ts,js,tsx,jsx with `ts-jest`\n      // \'^.+\\\\.m?[tj]sx?$\' to process ts,js,tsx,jsx,mts,mjs,mtsx,mjsx with `ts-jest`\n      "^.+\\\\.tsx?$": [\n        "ts-jest",\n        {\n          "diagnostics": {\n            "warnOnly": true\n          }\n        }\n      ]\n    }\n  }\n}\n'})})})]}),"\n",(0,i.jsx)(e.h5,{id:"ignoring-some-error-codes",children:"Ignoring some error codes"}),"\n",(0,i.jsxs)(e.p,{children:["All TypeScript error codes can be found ",(0,i.jsx)(e.a,{href:"https://github.com/Microsoft/TypeScript/blob/main/src/compiler/diagnosticMessages.json",children:"there"}),". The ",(0,i.jsx)(e.code,{children:"ignoreCodes"})," option accepts this values:"]}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["A single ",(0,i.jsx)(e.code,{children:"number"})," (example: ",(0,i.jsx)(e.code,{children:"1009"}),"): unique error code to ignore"]}),"\n",(0,i.jsxs)(e.li,{children:["A ",(0,i.jsx)(e.code,{children:"string"})," with a code (example ",(0,i.jsx)(e.code,{children:'"1009"'}),", ",(0,i.jsx)(e.code,{children:'"TS1009"'})," or ",(0,i.jsx)(e.code,{children:'"TS1009"'}),")"]}),"\n",(0,i.jsxs)(e.li,{children:["A ",(0,i.jsx)(e.code,{children:"string"})," with a list of the above (example: ",(0,i.jsx)(e.code,{children:'"1009, TS2571, 4072"'}),")"]}),"\n",(0,i.jsxs)(e.li,{children:["An ",(0,i.jsx)(e.code,{children:"array"})," of one or more from ",(0,i.jsx)(e.code,{children:"1"})," or ",(0,i.jsx)(e.code,{children:"3"})," (example: ",(0,i.jsx)(e.code,{children:'[1009, "TS2571", "6031"]'}),")"]}),"\n"]}),"\n",(0,i.jsxs)(o.Z,{groupId:"code-examples",children:[(0,i.jsx)(l.Z,{value:"js",label:"JavaScript",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"tab",children:"// jest.config.js\n/** @type {import('ts-jest').JestConfigWithTsJest} */\nmodule.exports = {\n  // [...]\n  transform: {\n    // '^.+\\\\.[tj]sx?$' to process ts,js,tsx,jsx with `ts-jest`\n    // '^.+\\\\.m?[tj]sx?$' to process ts,js,tsx,jsx,mts,mjs,mtsx,mjsx with `ts-jest`\n    '^.+\\\\.tsx?$': [\n      'ts-jest',\n      {\n        diagnostics: {\n          ignoreCodes: [2571, 6031, 18003],\n        },\n      },\n    ],\n  },\n}\n"})})}),(0,i.jsx)(l.Z,{value:"ts",label:"TypeScript",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",metastring:"tab",children:"// jest.config.ts\nimport type { JestConfigWithTsJest } from 'ts-jest'\n\nconst jestConfig: JestConfigWithTsJest = {\n  // [...]\n  transform: {\n    // '^.+\\\\.[tj]sx?$' to process ts,js,tsx,jsx with `ts-jest`\n    // '^.+\\\\.m?[tj]sx?$' to process ts,js,tsx,jsx,mts,mjs,mtsx,mjsx with `ts-jest`\n    '^.+\\\\.tsx?$': [\n      'ts-jest',\n      {\n        diagnostics: {\n          ignoreCodes: [2571, 6031, 18003],\n        },\n      },\n    ],\n  },\n}\n\nexport default jestConfig\n"})})}),(0,i.jsx)(l.Z,{value:"JSON",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-JSON",metastring:"tab",children:'// package.json\n{\n  // [...]\n  "jest": {\n    "transform": {\n      // \'^.+\\\\.[tj]sx?$\' to process ts,js,tsx,jsx with `ts-jest`\n      // \'^.+\\\\.m?[tj]sx?$\' to process ts,js,tsx,jsx,mts,mjs,mtsx,mjsx with `ts-jest`\n      "^.+\\\\.tsx?$": [\n        "ts-jest",\n        {\n          "diagnostics": {\n            "ignoreCodes": [2571, 6031, 18003]\n          }\n        }\n      ]\n    }\n  }\n}\n'})})})]})]})}function h(s={}){let{wrapper:e}={...(0,r.a)(),...s.components};return e?(0,i.jsx)(e,{...s,children:(0,i.jsx)(x,{...s})}):x(s)}},4250:function(s,e,t){t.d(e,{Z:()=>r});var n=t(5893);t(7294);var i=t(7026);function r(s){let{children:e,hidden:t,className:r}=s;return(0,n.jsx)("div",{role:"tabpanel",className:(0,i.Z)("tabItem_Ymn6",r),hidden:t,children:e})}},7057:function(s,e,t){t.d(e,{Z:()=>f});var n=t(5893),i=t(7294),r=t(7026),o=t(1770),l=t(6550),a=t(5104),c=t(1906),d=t(2227),j=t(6588);function x(s){return i.Children.toArray(s).filter(s=>"\n"!==s).map(s=>{if(!s||(0,i.isValidElement)(s)&&function(s){let{props:e}=s;return!!e&&"object"==typeof e&&"value"in e}(s))return s;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof s.type?s.type:s.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(s){let{value:e,tabValues:t}=s;return t.some(s=>s.value===e)}var u=t(7131);function p(s){let{className:e,block:t,selectedValue:i,selectValue:l,tabValues:a}=s,c=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),j=s=>{let e=s.currentTarget,t=a[c.indexOf(e)].value;t!==i&&(d(e),l(t))},x=s=>{let e=null;switch(s.key){case"Enter":j(s);break;case"ArrowRight":{let t=c.indexOf(s.currentTarget)+1;e=c[t]??c[0];break}case"ArrowLeft":{let t=c.indexOf(s.currentTarget)-1;e=c[t]??c[c.length-1]}}e?.focus()};return(0,n.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},e),children:a.map(s=>{let{value:e,label:t,attributes:o}=s;return(0,n.jsx)("li",{role:"tab",tabIndex:i===e?0:-1,"aria-selected":i===e,ref:s=>{c.push(s)},onKeyDown:x,onClick:j,...o,className:(0,r.Z)("tabs__item","tabItem_LNqP",o?.className,{"tabs__item--active":i===e}),children:t??e},e)})})}function m(s){let{lazy:e,children:t,selectedValue:o}=s,l=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){let s=l.find(s=>s.props.value===o);return s?(0,i.cloneElement)(s,{className:(0,r.Z)("margin-top--md",s.props.className)}):null}return(0,n.jsx)("div",{className:"margin-top--md",children:l.map((s,e)=>(0,i.cloneElement)(s,{key:e,hidden:s.props.value!==o}))})}function g(s){let e=function(s){let{defaultValue:e,queryString:t=!1,groupId:n}=s,r=function(s){let{values:e,children:t}=s;return(0,i.useMemo)(()=>{let s=e??x(t).map(s=>{let{props:{value:e,label:t,attributes:n,default:i}}=s;return{value:e,label:t,attributes:n,default:i}}),n=(0,d.lx)(s,(s,e)=>s.value===e.value);if(n.length>0)throw Error(`Docusaurus error: Duplicate values "${n.map(s=>s.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return s},[e,t])}(s),[o,u]=(0,i.useState)(()=>(function(s){let{defaultValue:e,tabValues:t}=s;if(0===t.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:t}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(s=>s.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}let n=t.find(s=>s.default)??t[0];if(!n)throw Error("Unexpected error: 0 tabValues");return n.value})({defaultValue:e,tabValues:r})),[p,m]=function(s){let{queryString:e=!1,groupId:t}=s,n=(0,l.k6)(),r=function(s){let{queryString:e=!1,groupId:t}=s;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,c._X)(r),(0,i.useCallback)(s=>{if(!r)return;let e=new URLSearchParams(n.location.search);e.set(r,s),n.replace({...n.location,search:e.toString()})},[r,n])]}({queryString:t,groupId:n}),[g,f]=function(s){let{groupId:e}=s,t=e?`docusaurus.tab.${e}`:null,[n,r]=(0,j.Nk)(t);return[n,(0,i.useCallback)(s=>{t&&r.set(s)},[t,r])]}({groupId:n}),b=(()=>{let s=p??g;return h({value:s,tabValues:r})?s:null})();return(0,a.Z)(()=>{b&&u(b)},[b]),{selectedValue:o,selectValue:(0,i.useCallback)(s=>{if(!h({value:s,tabValues:r}))throw Error(`Can't select invalid tab value=${s}`);u(s),m(s),f(s)},[m,f,r]),tabValues:r}}(s);return(0,n.jsxs)("div",{className:(0,r.Z)("tabs-container","tabList__CuJ"),children:[(0,n.jsx)(p,{...e,...s}),(0,n.jsx)(m,{...e,...s})]})}function f(s){let e=(0,u.Z)();return(0,n.jsx)(g,{...s,children:x(s.children)},String(e))}},65:function(s,e,t){t.d(e,{Z:()=>l,a:()=>o});var n=t(7294);let i={},r=n.createContext(i);function o(s){let e=n.useContext(r);return n.useMemo(function(){return"function"==typeof s?s(e):{...e,...s}},[e,s])}function l(s){let e;return e=s.disableParentContext?"function"==typeof s.components?s.components(i):s.components||i:o(s.components),n.createElement(r.Provider,{value:e},s.children)}}}]);