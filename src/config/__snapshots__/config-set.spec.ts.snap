// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`customTransformers should return an object containing all resolved transformers 1`] = `
Object {
  "before": Array [
    [Function],
  ],
}
`;

exports[`customTransformers should return an object containing all resolved transformers 2`] = `
Object {
  "before": Array [
    [Function],
    [Function],
  ],
}
`;

exports[`customTransformers should return an object containing all resolved transformers 3`] = `
Object {
  "after": Array [
    [Function],
  ],
  "before": Array [
    [Function],
  ],
}
`;

exports[`customTransformers should return an object containing all resolved transformers 4`] = `
Object {
  "afterDeclarations": Array [
    [Function],
  ],
  "before": Array [
    [Function],
  ],
}
`;

exports[`customTransformers should return an object containing all resolved transformers 5`] = `
Object {
  "before": Array [
    [Function],
    [Function],
  ],
}
`;

exports[`isTestFile should return a boolean value whether the file matches test pattern 1`] = `true`;

exports[`isTestFile should return a boolean value whether the file matches test pattern 2`] = `true`;

exports[`isTestFile should return a boolean value whether the file matches test pattern 3`] = `true`;

exports[`isTestFile should return a boolean value whether the file matches test pattern 4`] = `true`;

exports[`readTsConfig resolve configFileName normally module in tsConfig is not the same as forced module and allowSyntheticDefaultImports is false in tsConfig should use correct paths when searching 1`] = `
Array [
  Object {
    "category": 3,
    "code": 151001,
    "file": undefined,
    "length": undefined,
    "messageText": "If you have issues related to imports, you should consider setting \`esModuleInterop\` to \`true\` in your TypeScript configuration file (usually \`tsconfig.json\`). See https://blogs.msdn.microsoft.com/typescript/2018/01/31/announcing-typescript-2-7/#easier-ecmascript-module-interoperability for more information.",
    "start": undefined,
  },
]
`;

exports[`readTsConfig resolve configFileName normally module in tsConfig is not the same as forced module and allowSyntheticDefaultImports is false in tsConfig should use given tsconfig path 1`] = `
Array [
  Object {
    "category": 3,
    "code": 151001,
    "file": undefined,
    "length": undefined,
    "messageText": "If you have issues related to imports, you should consider setting \`esModuleInterop\` to \`true\` in your TypeScript configuration file (usually \`tsconfig.json\`). See https://blogs.msdn.microsoft.com/typescript/2018/01/31/announcing-typescript-2-7/#easier-ecmascript-module-interoperability for more information.",
    "start": undefined,
  },
]
`;

exports[`readTsConfig resolve configFileName normally module in tsConfig is not the same as forced module and esModuleInterop is not in tsConfig should use correct paths when searching 1`] = `
Array [
  Object {
    "category": 3,
    "code": 151001,
    "file": undefined,
    "length": undefined,
    "messageText": "If you have issues related to imports, you should consider setting \`esModuleInterop\` to \`true\` in your TypeScript configuration file (usually \`tsconfig.json\`). See https://blogs.msdn.microsoft.com/typescript/2018/01/31/announcing-typescript-2-7/#easier-ecmascript-module-interoperability for more information.",
    "start": undefined,
  },
]
`;

exports[`readTsConfig resolve configFileName normally module in tsConfig is not the same as forced module and esModuleInterop is not in tsConfig should use given tsconfig path 1`] = `
Array [
  Object {
    "category": 3,
    "code": 151001,
    "file": undefined,
    "length": undefined,
    "messageText": "If you have issues related to imports, you should consider setting \`esModuleInterop\` to \`true\` in your TypeScript configuration file (usually \`tsconfig.json\`). See https://blogs.msdn.microsoft.com/typescript/2018/01/31/announcing-typescript-2-7/#easier-ecmascript-module-interoperability for more information.",
    "start": undefined,
  },
]
`;
