// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cacheKey should be a string 1`] = `"{\\"digest\\":\\"a0d51ca854194df8191d0e65c0ca4730f510f332\\",\\"jest\\":{\\"__backported\\":true,\\"globals\\":{}},\\"transformers\\":[\\"hoisting-jest-mock@4\\"],\\"tsJest\\":{\\"compiler\\":\\"typescript\\",\\"diagnostics\\":{\\"ignoreCodes\\":[6059,18002,18003],\\"pretty\\":true,\\"throws\\":true},\\"isolatedModules\\":false,\\"packageJson\\":{\\"kind\\":\\"file\\"},\\"transformers\\":{},\\"tsConfig\\":{\\"kind\\":\\"file\\",\\"value\\":\\"\\"}},\\"tsconfig\\":{\\"options\\":{\\"configFilePath\\":\\"\\",\\"declaration\\":false,\\"inlineSourceMap\\":false,\\"inlineSources\\":true,\\"module\\":1,\\"noEmit\\":false,\\"removeComments\\":false,\\"sourceMap\\":true,\\"target\\":1,\\"types\\":[]},\\"raw\\":{\\"compileOnSave\\":false,\\"compilerOptions\\":{\\"composite\\":true,\\"declaration\\":true,\\"types\\":[]},\\"exclude\\":[\\"foo/**/*\\"],\\"include\\":[\\"bar/**/*\\"]}}}"`;

exports[`isTestFile should return a boolean value whether the file matches test pattern 1`] = `true`;

exports[`isTestFile should return a boolean value whether the file matches test pattern 2`] = `true`;

exports[`isTestFile should return a boolean value whether the file matches test pattern 3`] = `true`;

exports[`isTestFile should return a boolean value whether the file matches test pattern 4`] = `true`;

exports[`jsonValue should create jsonValue based on each config and version 1`] = `
Object {
  "babel": undefined,
  "digest": "a0d51ca854194df8191d0e65c0ca4730f510f332",
  "jest": Object {
    "__backported": true,
    "cacheDirectory": undefined,
    "globals": Object {},
    "name": undefined,
  },
  "transformers": Array [
    "hoisting-jest-mock@4",
  ],
  "tsJest": Object {
    "babelConfig": undefined,
    "compiler": "typescript",
    "diagnostics": Object {
      "ignoreCodes": Array [
        6059,
        18002,
        18003,
      ],
      "pretty": true,
      "throws": true,
    },
    "isolatedModules": false,
    "packageJson": Object {
      "kind": "file",
      "value": undefined,
    },
    "stringifyContentPathRegex": undefined,
    "transformers": Object {},
    "tsConfig": Object {
      "kind": "file",
      "value": "",
    },
  },
  "tsconfig": Object {
    "options": Object {
      "configFilePath": "",
      "declaration": false,
      "inlineSourceMap": false,
      "inlineSources": true,
      "module": 1,
      "noEmit": false,
      "removeComments": false,
      "sourceMap": true,
      "target": 1,
      "types": Array [],
    },
    "raw": Object {
      "compileOnSave": false,
      "compilerOptions": Object {
        "composite": true,
        "declaration": true,
        "types": Array [],
      },
      "exclude": Array [
        "foo/**/*",
      ],
      "include": Array [
        "bar/**/*",
      ],
    },
  },
}
`;

exports[`readTsConfig resolve configFileName normally module in tsConfig is not the same as forced module and allowSyntheticDefaultImports is false in tsConfig should use correct paths when searching 1`] = `
Array [
  Object {
    "category": 3,
    "code": 151001,
    "file": undefined,
    "length": undefined,
    "messageText": "If you have issues related to imports, you should consider setting \`esModuleInterop\` to \`true\` in your TypeScript configuration file (usually \`tsconfig.json\`). See https://blogs.msdn.microsoft.com/typescript/2018/01/31/announcing-typescript-2-7/#easier-ecmascript-module-interoperability for more information.",
    "start": undefined,
  },
]
`;

exports[`readTsConfig resolve configFileName normally module in tsConfig is not the same as forced module and allowSyntheticDefaultImports is false in tsConfig should use given tsconfig path 1`] = `
Array [
  Object {
    "category": 3,
    "code": 151001,
    "file": undefined,
    "length": undefined,
    "messageText": "If you have issues related to imports, you should consider setting \`esModuleInterop\` to \`true\` in your TypeScript configuration file (usually \`tsconfig.json\`). See https://blogs.msdn.microsoft.com/typescript/2018/01/31/announcing-typescript-2-7/#easier-ecmascript-module-interoperability for more information.",
    "start": undefined,
  },
]
`;

exports[`readTsConfig resolve configFileName normally module in tsConfig is not the same as forced module and esModuleInterop is not in tsConfig should use correct paths when searching 1`] = `
Array [
  Object {
    "category": 3,
    "code": 151001,
    "file": undefined,
    "length": undefined,
    "messageText": "If you have issues related to imports, you should consider setting \`esModuleInterop\` to \`true\` in your TypeScript configuration file (usually \`tsconfig.json\`). See https://blogs.msdn.microsoft.com/typescript/2018/01/31/announcing-typescript-2-7/#easier-ecmascript-module-interoperability for more information.",
    "start": undefined,
  },
]
`;

exports[`readTsConfig resolve configFileName normally module in tsConfig is not the same as forced module and esModuleInterop is not in tsConfig should use given tsconfig path 1`] = `
Array [
  Object {
    "category": 3,
    "code": 151001,
    "file": undefined,
    "length": undefined,
    "messageText": "If you have issues related to imports, you should consider setting \`esModuleInterop\` to \`true\` in your TypeScript configuration file (usually \`tsconfig.json\`). See https://blogs.msdn.microsoft.com/typescript/2018/01/31/announcing-typescript-2-7/#easier-ecmascript-module-interoperability for more information.",
    "start": undefined,
  },
]
`;

exports[`tsCustomTransformers should return an object containing all resolved transformers 1`] = `
Object {
  "before": Array [
    [Function],
  ],
}
`;

exports[`tsCustomTransformers should return an object containing all resolved transformers 2`] = `
Object {
  "before": Array [
    [Function],
    [Function],
  ],
}
`;

exports[`tsCustomTransformers should return an object containing all resolved transformers 3`] = `
Object {
  "after": Array [
    [Function],
  ],
  "before": Array [
    [Function],
  ],
}
`;

exports[`tsCustomTransformers should return an object containing all resolved transformers 4`] = `
Object {
  "afterDeclarations": Array [
    [Function],
  ],
  "before": Array [
    [Function],
  ],
}
`;

exports[`tsJest diagnostics should be correct for various kinds of ignoreCodes 1`] = `
Object {
  "ignoreCodes": Array [
    6059,
    18002,
    18003,
    10,
  ],
  "pathRegex": undefined,
  "pretty": true,
  "throws": true,
}
`;

exports[`tsJest diagnostics should be correct for various kinds of ignoreCodes 2`] = `
Object {
  "ignoreCodes": Array [
    6059,
    18002,
    18003,
    10,
  ],
  "pathRegex": undefined,
  "pretty": true,
  "throws": true,
}
`;

exports[`tsJest diagnostics should be correct for various kinds of ignoreCodes 3`] = `
Object {
  "ignoreCodes": Array [
    6059,
    18002,
    18003,
    2571,
  ],
  "pathRegex": undefined,
  "pretty": true,
  "throws": true,
}
`;

exports[`tsJest diagnostics should be correct for various kinds of ignoreCodes 4`] = `
Object {
  "ignoreCodes": Array [
    6059,
    18002,
    18003,
    1009,
    2571,
    4072,
  ],
  "pathRegex": undefined,
  "pretty": true,
  "throws": true,
}
`;

exports[`tsJest diagnostics should be correct for various kinds of ignoreCodes 5`] = `
Object {
  "ignoreCodes": Array [
    6059,
    18002,
    18003,
    1009,
    2571,
    6031,
    10,
  ],
  "pathRegex": undefined,
  "pretty": true,
  "throws": true,
}
`;

exports[`tsJest diagnostics should be correct for various kinds of ignoreCodes 6`] = `
Object {
  "ignoreCodes": Array [
    6059,
    18002,
    18003,
  ],
  "pathRegex": undefined,
  "pretty": true,
  "throws": true,
}
`;

exports[`tsJest diagnostics should be correct for various kinds of ignoreCodes 7`] = `
Object {
  "ignoreCodes": Array [
    6059,
    18002,
    18003,
  ],
  "pathRegex": undefined,
  "pretty": true,
  "throws": true,
}
`;

exports[`tsJest jest should merge parent config if any with globals is an empty object 1`] = `
Object {
  "babelConfig": undefined,
  "compiler": "typescript",
  "diagnostics": Object {
    "ignoreCodes": Array [
      6059,
      18002,
      18003,
    ],
    "pretty": true,
    "throws": true,
  },
  "isolatedModules": false,
  "packageJson": Object {
    "kind": "file",
    "value": undefined,
  },
  "stringifyContentPathRegex": undefined,
  "transformers": Object {},
  "tsConfig": Object {
    "kind": "file",
    "value": undefined,
  },
}
`;

exports[`tsJest jest should merge parent config if any with globals is undefined 1`] = `
Object {
  "babelConfig": undefined,
  "compiler": "typescript",
  "diagnostics": Object {
    "ignoreCodes": Array [
      6059,
      18002,
      18003,
    ],
    "pretty": true,
    "throws": true,
  },
  "isolatedModules": false,
  "packageJson": Object {
    "kind": "file",
    "value": undefined,
  },
  "stringifyContentPathRegex": undefined,
  "transformers": Object {},
  "tsConfig": Object {
    "kind": "file",
    "value": undefined,
  },
}
`;

exports[`tsJest jest should return correct config and go thru backports 1`] = `
Object {
  "babelConfig": undefined,
  "compiler": "typescript",
  "diagnostics": Object {
    "ignoreCodes": Array [
      6059,
      18002,
      18003,
    ],
    "pretty": true,
    "throws": true,
  },
  "isolatedModules": false,
  "packageJson": Object {
    "kind": "file",
    "value": undefined,
  },
  "stringifyContentPathRegex": undefined,
  "transformers": Object {},
  "tsConfig": Object {
    "kind": "file",
    "value": undefined,
  },
}
`;

exports[`tsJest transformers should display deprecation warning message when config transformers is string array 1`] = `
"[level:40] The configuration for astTransformers as string[] is deprecated and will be removed in ts-jest 27. Please define your custom AST transformers in a form of an object. More information you can check online documentation https://kulshekhar.github.io/ts-jest/user/config/astTransformers
"
`;
