"use strict";(self.webpackChunkts_jest_docs=self.webpackChunkts_jest_docs||[]).push([["1322"],{5540:function(t,e,s){s.r(e),s.d(e,{frontMatter:()=>c,default:()=>p,toc:()=>a,metadata:()=>n,assets:()=>l,contentTitle:()=>r});var n=JSON.parse('{"id":"getting-started/options/tsconfig","title":"TypeScript Config option","description":"The tsconfig option allows you to define which tsconfig JSON file to use. An inline compiler options object can also be specified instead of a file path.","source":"@site/versioned_docs/version-29.3/getting-started/options/tsconfig.md","sourceDirName":"getting-started/options","slug":"/getting-started/options/tsconfig","permalink":"/ts-jest/pr-preview/pr-5044/docs/29.3/getting-started/options/tsconfig","draft":false,"unlisted":false,"editUrl":"https://github.com/kulshekhar/ts-jest/edit/main/website/versioned_docs/version-29.3/getting-started/options/tsconfig.md","tags":[],"version":"29.3","lastUpdatedBy":"renovate[bot]","lastUpdatedAt":1757086709000,"frontMatter":{"title":"TypeScript Config option"}}'),o=s(5893),i=s(65);let c={title:"TypeScript Config option"},r=void 0,l={},a=[{value:"Examples",id:"examples",level:3},{value:"Path to a <code>tsconfig</code> file",id:"path-to-a-tsconfig-file",level:4},{value:"Inline compiler options",id:"inline-compiler-options",level:4},{value:"Disable auto-lookup",id:"disable-auto-lookup",level:4}];function d(t){let e={a:"a",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,i.a)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"tsconfig"})," option allows you to define which ",(0,o.jsx)(e.code,{children:"tsconfig"})," JSON file to use. An inline ",(0,o.jsx)(e.a,{href:"https://www.typescriptlang.org/tsconfig",children:"compiler options"})," object can also be specified instead of a file path."]}),"\n",(0,o.jsxs)(e.p,{children:["By default ",(0,o.jsx)(e.code,{children:"ts-jest"})," will try to find a ",(0,o.jsx)(e.code,{children:"tsconfig.json"})," in your project. If it cannot find one, it will use the default TypeScript ",(0,o.jsx)(e.a,{href:"https://www.typescriptlang.org/tsconfig",children:"compiler options"}),"; except, ",(0,o.jsx)(e.code,{children:"ES2015"})," is used as ",(0,o.jsx)(e.code,{children:"target"})," instead of ",(0,o.jsx)(e.code,{children:"ES5"}),"."]}),"\n",(0,o.jsxs)(e.p,{children:["If you need to use defaults and force ",(0,o.jsx)(e.code,{children:"ts-jest"})," to use the defaults even if there is a ",(0,o.jsx)(e.code,{children:"tsconfig.json"})," in your project, you can set this option to ",(0,o.jsx)(e.code,{children:"false"}),"."]}),"\n",(0,o.jsx)(e.h3,{id:"examples",children:"Examples"}),"\n",(0,o.jsxs)(e.h4,{id:"path-to-a-tsconfig-file",children:["Path to a ",(0,o.jsx)(e.code,{children:"tsconfig"})," file"]}),"\n",(0,o.jsxs)(e.p,{children:["The path should be relative to the current working directory where you start Jest from. You can also use ",(0,o.jsx)(e.code,{children:"<rootDir>"})," in the path to start from the project root dir."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",metastring:'title="jest.config.ts"',children:"import type { Config } from 'jest'\n\nconst jestConfig: JestConfigWithTsJest = {\n  // [...]\n  transform: {\n    // '^.+\\\\.[tj]sx?$' to process ts,js,tsx,jsx with `ts-jest`\n    // '^.+\\\\.m?[tj]sx?$' to process ts,js,tsx,jsx,mts,mjs,mtsx,mjsx with `ts-jest`\n    '^.+\\\\.tsx?$': [\n      'ts-jest',\n      {\n        tsconfig: 'tsconfig.test.json',\n      },\n    ],\n  },\n}\n\nexport default jestConfig\n"})}),"\n",(0,o.jsx)(e.h4,{id:"inline-compiler-options",children:"Inline compiler options"}),"\n",(0,o.jsxs)(e.p,{children:["Refer to the TypeScript ",(0,o.jsx)(e.a,{href:"https://www.typescriptlang.org/tsconfig",children:"compiler options"})," for reference.\nIt's basically the same object you'd put in your ",(0,o.jsx)(e.code,{children:"tsconfig.json"}),"'s ",(0,o.jsx)(e.code,{children:"compilerOptions"}),"."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",metastring:'title="jest.config.ts"',children:"import type { Config } from 'jest'\n\nconst jestConfig: Config = {\n  // [...]\n  transform: {\n    // '^.+\\\\.[tj]sx?$' to process ts,js,tsx,jsx with `ts-jest`\n    // '^.+\\\\.m?[tj]sx?$' to process ts,js,tsx,jsx,mts,mjs,mtsx,mjsx with `ts-jest`\n    '^.+\\\\.tsx?$': [\n      'ts-jest',\n      {\n        tsconfig: {\n          importHelpers: true,\n        },\n      },\n    ],\n  },\n}\n\nexport default jestConfig\n"})}),"\n",(0,o.jsx)(e.h4,{id:"disable-auto-lookup",children:"Disable auto-lookup"}),"\n",(0,o.jsxs)(e.p,{children:["By default ",(0,o.jsx)(e.code,{children:"ts-jest"})," will try to find a ",(0,o.jsx)(e.code,{children:"tsconfig.json"})," in your project. But you may not want to use it at all and keep TypeScript default options. You can achieve this by setting ",(0,o.jsx)(e.code,{children:"tsconfig"})," to ",(0,o.jsx)(e.code,{children:"false"}),"."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",metastring:'title="jest.config.ts"',children:"import type { Config } from 'jest'\n\nconst jestConfig: Config = {\n  // [...]\n  transform: {\n    // '^.+\\\\.[tj]sx?$' to process ts,js,tsx,jsx with `ts-jest`\n    // '^.+\\\\.m?[tj]sx?$' to process ts,js,tsx,jsx,mts,mjs,mtsx,mjsx with `ts-jest`\n    '^.+\\\\.tsx?$': [\n      'ts-jest',\n      {\n        tsconfig: false,\n      },\n    ],\n  },\n}\n\nexport default jestConfig\n"})})]})}function p(t={}){let{wrapper:e}={...(0,i.a)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(d,{...t})}):d(t)}},65:function(t,e,s){s.d(e,{Z:()=>r,a:()=>c});var n=s(7294);let o={},i=n.createContext(o);function c(t){let e=n.useContext(i);return n.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:c(t.components),n.createElement(i.Provider,{value:e},t.children)}}}]);