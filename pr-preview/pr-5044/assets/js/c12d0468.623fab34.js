"use strict";(self.webpackChunkts_jest_docs=self.webpackChunkts_jest_docs||[]).push([["5496"],{5573:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>a,default:()=>p,toc:()=>c,metadata:()=>s,assets:()=>l,contentTitle:()=>r});var s=JSON.parse('{"id":"getting-started/options/transpilation","title":"transpilation option","description":"By default ts-jest uses TypeScript Compiler API aka full Program in the context of a project (yours), with full type-checking and features.","source":"@site/docs/getting-started/options/transpilation.md","sourceDirName":"getting-started/options","slug":"/getting-started/options/transpilation","permalink":"/ts-jest/pr-preview/pr-5044/docs/next/getting-started/options/transpilation","draft":false,"unlisted":false,"editUrl":"https://github.com/kulshekhar/ts-jest/edit/main/website/docs/getting-started/options/transpilation.md","tags":[],"version":"current","lastUpdatedBy":"ahnpnl","lastUpdatedAt":1758103314000,"frontMatter":{"title":"transpilation option"}}'),i=n(5893),o=n(65);let a={title:"transpilation option"},r=void 0,l={},c=[{value:"Example",id:"example",level:3},{value:"Performance",id:"performance",level:2},{value:"Example",id:"example-1",level:3},{value:"Caveats",id:"caveats",level:2}];function d(e){let t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["By default ",(0,i.jsx)(t.code,{children:"ts-jest"})," uses TypeScript Compiler API aka full ",(0,i.jsx)(t.code,{children:"Program"})," in the context of a project (yours), with full type-checking and features.\nBut it can also be used to compile each file separately, which is usually named as ",(0,i.jsx)(t.code,{children:"transpilation"})," like other tools ",(0,i.jsx)(t.code,{children:"Babel"}),", ",(0,i.jsx)(t.code,{children:"swc"}),", ",(0,i.jsx)(t.code,{children:"esbuild"})," etc.\nThat's what the ",(0,i.jsx)(t.code,{children:"transpilation"})," option (which defaults to ",(0,i.jsx)(t.code,{children:"false"}),") does."]}),"\n",(0,i.jsxs)(t.p,{children:["You'll lose type-checking ability and all ",(0,i.jsx)(t.a,{href:"https://www.typescriptlang.org/tsconfig/#isolatedModules",children:"TypeScript limitations"})," are applied in trading off for faster test running."]}),"\n",(0,i.jsx)(t.p,{children:"Here is the example how to use the option"}),"\n",(0,i.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="jest.config.ts"',children:"import type { Config } from 'jest'\n\nconst jestConfig: Config = {\n  // [...]\n  transform: {\n    // '^.+\\\\.[tj]sx?$' to process js/ts with `ts-jest`\n    // '^.+\\\\.m?[tj]sx?$' to process js/ts/mjs/mts with `ts-jest`\n    '^.+\\\\.tsx?$': [\n      'ts-jest',\n      {\n        transpilation: true,\n      },\n    ],\n  },\n}\n\nexport default jestConfig\n"})}),"\n",(0,i.jsx)(t.h2,{id:"performance",children:"Performance"}),"\n",(0,i.jsxs)(t.p,{children:["Using ",(0,i.jsx)(t.code,{children:"transpilation: false"})," comes with a cost of performance comparing to ",(0,i.jsx)(t.code,{children:"transpilation: true"}),". There is a way\nto improve the performance when using this mode by changing the value of ",(0,i.jsx)(t.code,{children:"include"})," in ",(0,i.jsx)(t.code,{children:"tsconfig"})," which is used by ",(0,i.jsx)(t.code,{children:"ts-jest"}),".\nThe least amount of files which are provided in ",(0,i.jsx)(t.code,{children:"include"}),", the more performance the test run can gain."]}),"\n",(0,i.jsx)(t.h3,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",metastring:'title="tsconfig.json"',children:'{\n  // ...other configs\n  "include": ["my-typings/*", "my-global-modules/*"]\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"caveats",children:"Caveats"}),"\n",(0,i.jsxs)(t.p,{children:["Limiting the amount of files loaded via ",(0,i.jsx)(t.code,{children:"include"})," can greatly boost performance when running tests. However, the trade off\nis ",(0,i.jsx)(t.code,{children:"ts-jest"})," might not recognize all files which are intended to use with ",(0,i.jsx)(t.code,{children:"jest"}),". One can run into issues with custom typings,\nglobal modules, etc..."]}),"\n",(0,i.jsxs)(t.p,{children:["The suggested solution is what is needed for the test environment should be captured by\nglob patterns in ",(0,i.jsx)(t.code,{children:"include"}),", to gain both performance boost and avoid breaking behaviors."]})]})}function p(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},65:function(e,t,n){n.d(t,{Z:()=>r,a:()=>a});var s=n(7294);let i={},o=s.createContext(i);function a(e){let t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);